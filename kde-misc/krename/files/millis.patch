diff --git a/src/systemplugin.cpp b/src/systemplugin.cpp
index b1cb619..f01d75e 100644
--- a/src/systemplugin.cpp
+++ b/src/systemplugin.cpp
@@ -26,6 +26,10 @@
 #include <KLocalizedString>
 #include <KIO/StatJob>
 
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <unistd.h>
+
 SystemPlugin::SystemPlugin(PluginLoader *loader)
     : FilePlugin(loader)
 {
@@ -38,6 +42,7 @@ SystemPlugin::SystemPlugin(PluginLoader *loader)
     this->addSupportedToken("hour");
     this->addSupportedToken("minute");
     this->addSupportedToken("second");
+    this->addSupportedToken("msec");
     this->addSupportedToken("user");
     this->addSupportedToken("group");
     this->addSupportedToken("creationdate");
@@ -57,6 +62,7 @@ SystemPlugin::SystemPlugin(PluginLoader *loader)
     m_help.append(Plugin::createHelpEntry("hour", i18n("Insert the current hour as number")));
     m_help.append(Plugin::createHelpEntry("minute", i18n("Insert the current minute as number")));
     m_help.append(Plugin::createHelpEntry("second", i18n("Insert the current second as number")));
+    m_help.append(Plugin::createHelpEntry("msec", i18n("Insert the current msec as number")));
     m_help.append(Plugin::createHelpEntry("user", i18n("Owner of the file")));
     m_help.append(Plugin::createHelpEntry("group", i18n("Owning group of the file")));
     m_help.append(Plugin::createHelpEntry("creationdate", i18n("Insert the files creation date")));
@@ -117,26 +123,34 @@ QString SystemPlugin::processFile(BatchRenamer *b, int index, const QString &fil
         return tmp.sprintf("%0*i", 2, t.minute());
     } else if (token == "second") {
         return tmp.sprintf("%0*i", 2, t.second());
+    } else if (token == "msec") {
+        return tmp.sprintf("%0*i", 3, t.msec());
     } else {
         const QUrl &url = b->files()->at(index).srcUrl();
-        KIO::StatJob *statJob = KIO::stat(url, KIO::StatJob::SourceSide, 2);
+	const QString file_name = url.toLocalFile();
+	struct stat info;
+	stat(file_name.toLatin1().data(), &info);
+	uint64_t access_ms       = info.st_atime * 1000 + info.st_atim.tv_nsec / 1000000;
+	uint64_t status_ms       = info.st_ctime * 1000 + info.st_ctim.tv_nsec / 1000000;
+	uint64_t modification_ms = info.st_mtime * 1000 + info.st_mtim.tv_nsec / 1000000;
+        
+	KIO::StatJob *statJob = KIO::stat(url, KIO::StatJob::SourceSide, 2);
         statJob->exec();
         if (statJob->error()) {
             return QString();
         }
         KFileItem item(statJob->statResult(), url);
-        if (token == "user") {
+        
+	if (token == "user") {
             return item.user();
         } else if (token == "group") {
             return item.group();
-        } else if (token == "creationdate")
-            // TODO: Use toDateTime()
-        {
-            return time(item.time(KFileItem::ModificationTime).toTime_t(), format);
+        } else if (token == "creationdate") {
+            return time(QDateTime::fromMSecsSinceEpoch(modification_ms), format);
         } else if (token == "modificationdate") {
-            return time(item.time(KFileItem::ModificationTime).toTime_t(), format);
+            return time(QDateTime::fromMSecsSinceEpoch(modification_ms), format);
         } else if (token == "accessdate") {
-            return time(item.time(KFileItem::AccessTime).toTime_t(), format);
+            return time(QDateTime::fromMSecsSinceEpoch(access_ms), format);
         } else if (token == "filesize") {
             return QString::number(item.size());
         }
@@ -145,9 +159,7 @@ QString SystemPlugin::processFile(BatchRenamer *b, int index, const QString &fil
     return QString();
 }
 
-const QString SystemPlugin::time(time_t time, const QString &format)
+const QString SystemPlugin::time(const QDateTime& t, const QString &format)
 {
-    QDateTime dt;
-    dt.setTime_t(time);
-    return dt.toString(format);
+    return t.toString(format);
 }
diff --git a/src/systemplugin.h b/src/systemplugin.h
index 905a42e..310a725 100644
--- a/src/systemplugin.h
+++ b/src/systemplugin.h
@@ -79,7 +79,7 @@ public:
     inline virtual const QStringList &help() const;
 
 private:
-    const QString time(time_t time, const QString &format);
+    const QString time(const QDateTime& t, const QString &format);
 
 private:
     QStringList m_help;
